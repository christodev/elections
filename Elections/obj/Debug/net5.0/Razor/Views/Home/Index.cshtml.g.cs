#pragma checksum "C:\Users\toshiba\Desktop\Uni\OnlineCourses\DesignPatterns\Elections\Elections\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c7b4700c041db90696d51621b4199d1fcbad3150"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\toshiba\Desktop\Uni\OnlineCourses\DesignPatterns\Elections\Elections\Views\_ViewImports.cshtml"
using Elections;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\toshiba\Desktop\Uni\OnlineCourses\DesignPatterns\Elections\Elections\Views\_ViewImports.cshtml"
using Elections.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\toshiba\Desktop\Uni\OnlineCourses\DesignPatterns\Elections\Elections\Views\Home\Index.cshtml"
using Elections.ConstantValues;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c7b4700c041db90696d51621b4199d1fcbad3150", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6d6f3308f489fde6930c2762691a5e74bfda7861", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\toshiba\Desktop\Uni\OnlineCourses\DesignPatterns\Elections\Elections\Views\Home\Index.cshtml"
                                    
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<style>\r\n    .timer-container {\r\n        display: flex;\r\n");
            WriteLiteral("        justify-content: center;\r\n");
            WriteLiteral(@"        /*margin-top: 1rem;*/
        padding: 1rem;
    }

    .date-row {
        margin: 0 1rem;
        width: 200px;
        /*border: 1px solid red;*/
        box-shadow: -3px 3px 5px 2px rgba(0,0,0,.3);
        border-radius: 10px;
        padding: 1rem;
    }

    .time {
        font-size: 4rem;
    }
</style>

<div class=""text-center"">
    <h1 class=""display-3 mb-5"">Here we will change Lebanon!</h1>
    <h2>Time left to vote: </h2>
    <div class=""timer-container"">
");
            WriteLiteral(@"    </div>
</div>

<script>

    function displayTimer(days, hours, mins, secs) {
    //Display Timer
    document.querySelector("".timer-container"").innerHTML =
        `<div class=""date-row"">
                <h1>Days</h1>
                <h1 class=""time"">${days}</h1>
            </div>

            <div class=""date-row"">
                <h1>Hours</h1>
                <h1 class=""time"">${hours}</h1>
            </div>

            <div class=""date-row"">
                <h1>Minutes</h1>
                <h1 class=""time"">${mins}</h1>
            </div>

            <div class=""date-row"">
                <h1>Seconds</h1>
                <h1 class=""time"">${secs}</h1>
            </div>`;
    }


    id = setInterval(_ => {
        //Do some Calculations
        const deadline = new Date(""Feb 13, 2022 19:20:00"").getTime();

        const now = new Date().getTime();

        timeleft = deadline - now;

        let days = Math.floor(timeleft / (1000 * 60 * 60 * 24));
        let ");
            WriteLiteral(@"hours = Math.floor((timeleft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        let minutes = Math.floor((timeleft % (1000 * 60 * 60)) / (1000 * 60));
        let seconds = Math.floor((timeleft % (1000 * 60)) / 1000);

        if (timeleft < 0) {
            days = 0;
            hours = 0;
            minutes = 0;
            seconds = 0;
            //Display Timer one last time
            displayTimer(days, hours, minutes, seconds);
            document.querySelector(""h2"").innerHTML = ""Voting Ended, Click <a href='https://localhost:44395/User/Results'> here</a> to Check the Results"";
    clearInterval(id);
        }
        displayTimer(days, hours, minutes, seconds);

    }, 1000);


</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
